{"version":3,"sources":["components/TravelCard/TravelCard.jsx","components/TravelsBlock/TravelsBlock.jsx","actions/bookings/bookings.js","containers/MyBookings/MyBookings.jsx","App.js","serviceWorker.js","index.js"],"names":["moment","locale","useStyles","makeStyles","card","width","maxWidth","media","height","minHeight","color","TravelCard","cardData","classes","Card","className","CardActionArea","CardMedia","image","thumb","title","destination","outboundDate","format","cardSpaces","padding","minWidth","containerCards","display","flexFlow","justifyContent","alignItems","TravelsBlock","data","Typography","variant","map","item","key","getBookings","axios","get","then","response","MyBookings","useState","myListBookings","setMyListBookings","bookings","useEffect","Container","style","App","Boolean","window","location","hostname","match","ReactDOM","render","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2aASAA,IAAOC,OAAO,MAEd,IAAMC,EAAYC,YAAW,CAC5BC,KAAM,CACLC,MAAO,OACPC,SAAU,KAEXC,MAAO,CACNC,OAAQ,OACRC,UAAW,IACXC,MAAO,UAmCMC,EA/BI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEfC,EAAUX,IAEhB,OACC,kBAACY,EAAA,EAAD,CAAMC,UAAWF,EAAQT,MACxB,kBAACY,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCF,UAAWF,EAAQN,MACnBW,MAAON,EAASO,MAChBC,MAAM,oBAON,6BACC,8BACER,EAASS,aAEX,8BACErB,IAAOY,EAASU,cAAcC,OAAO,gBCxCvCrB,EAAYC,YAAW,CACzBqB,WAAY,CACRC,QAAS,WACTC,SAAU,SAEdC,eAAgB,CACZF,QAAS,WACTG,QAAS,OACTC,SAAU,WACVC,eAAgB,eAChBC,WAAY,YA8BLC,EA1BM,SAAC,GAAqB,IAAnBZ,EAAkB,EAAlBA,MAAOa,EAAW,EAAXA,KAErBpB,EAAUX,IAahB,OACI,6BACI,kBAACgC,EAAA,EAAD,CAAYC,QAAQ,MAAMf,GAC1B,yBAAKL,UAAWF,EAAQc,gBAZrBM,EAAKG,KAAI,SAACC,EAAMC,GACnB,OACI,yBAAKA,IAAKA,EAAKvB,UAAWF,EAAQW,YAC9B,kBAAC,EAAD,CAAYZ,SAAUyB,W,kBCxB7BE,EAAc,WACvB,OAAOC,IAAMC,IAAN,8DACFC,MAAK,SAAAC,GACF,OAAOA,EAASV,SCwBbW,EAvBI,WAAO,IAAD,EAEoBC,mBAAS,IAF7B,mBAEjBC,EAFiB,KAEDC,EAFC,KAKvBR,EACGS,EADHT,YASD,OANAU,qBAAU,WACTV,IAAcG,MAAK,SAAAC,GAClBI,EAAkBJ,QAEjB,CAACJ,IAGH,kBAACW,EAAA,EAAD,CAAWC,MAAO,CAAE1B,QAAS,WAC5B,kBAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKgB,MAAO,CAAE1B,QAAS,aAA3C,iBACA,kBAAC,EAAD,CAAcL,MAAM,WAAWa,KAAMa,IACrC,kBAAC,EAAD,CAAc1B,MAAM,OAAOa,KAAMa,MCXrBM,MARf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,Q,iBCEcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWV,MAE9BW,SAASC,eAAe,SDmHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.df14b12c.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardMedia from '@material-ui/core/CardMedia'\n// import Typography from '@material-ui/core/Typography'\nimport moment from 'moment'\nimport 'moment/locale/pt-br'\n\nmoment.locale('en')\n\nconst useStyles = makeStyles({\n\tcard: {\n\t\twidth: '100%',\n\t\tmaxWidth: 345\n\t},\n\tmedia: {\n\t\theight: '100%',\n\t\tminHeight: 140,\n\t\tcolor: '#fff'\n\t}\n})\n\nconst TravelCard = ({ cardData }) => {\n\n\tconst classes = useStyles()\n\t\n\treturn (\n\t\t<Card className={classes.card}>\n\t\t\t<CardActionArea>\n\t\t\t\t<CardMedia\n\t\t\t\t\tclassName={classes.media}\n\t\t\t\t\timage={cardData.thumb}\n\t\t\t\t\ttitle=\"bookings of user\">\n\t\t\t\t\t{/* <Typography gutterBottom variant=\"h5\" component=\"h2\">\n\t\t\t\t\t\t{cardData.destination}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n\t\t\t\t\t\t{moment(cardData.outboundDate).format('DD MMM')}\n\t\t\t\t\t</Typography> */}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{cardData.destination}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{moment(cardData.outboundDate).format('DD MMM')}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</CardMedia>\n\t\t\t</CardActionArea>\n\t\t</Card>\n    )\n}\n\nexport default TravelCard","import React from 'react'\r\nimport { TravelCard } from '../../components'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles({\r\n    cardSpaces: {\r\n        padding: '10px 0 0',\r\n        minWidth: '290px'\r\n    },\r\n    containerCards: {\r\n        padding: '0 0 45px',\r\n        display: 'flex',\r\n        flexFlow: 'row wrap',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center'\r\n    }\r\n})\r\n\r\nconst TravelsBlock = ({ title, data }) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const renderListOfBookings = () => {\r\n\r\n        return data.map((item, key) => {\r\n            return (\r\n                <div key={key} className={classes.cardSpaces}>\r\n                    <TravelCard cardData={item} />\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\">{title}</Typography>\r\n            <div className={classes.containerCards}>\r\n                {renderListOfBookings()}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TravelsBlock\r\n","import axios from 'axios'\n\n// const BASE_URL = process.env.REACT_APP_BASE_URL\n\nexport const getBookings = () => {\n    return axios.get(`https://5ba412108da2f20014654cf8.mockapi.io/api/v1/flights`)\n        .then(response => {\n            return response.data\n        }\n    )\n}","import React, { useState, useEffect } from 'react'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nimport { TravelsBlock } from '../../components'\n\nimport { bookings } from '../../actions'\n\nconst MyBookings = () => {\n\n\tconst [myListBookings, setMyListBookings] = useState([])\n\n\tconst {\n\t\tgetBookings\n\t} = bookings\n\n\tuseEffect(() => {\n\t\tgetBookings().then(response => {\n\t\t\tsetMyListBookings(response)\n\t\t})\n\t}, [getBookings])\n\n\treturn (\n\t\t<Container style={{ padding: '0 15px' }}>\n\t\t\t<Typography variant=\"h1\" style={{ padding: '0 0 45px' }} >Your Flights.</Typography>\n\t\t\t<TravelsBlock title=\"Upcoming\" data={myListBookings}/>\n\t\t\t<TravelsBlock title=\"Past\" data={myListBookings}/>\n\t\t</Container>\n\t)\n}\n\nexport default MyBookings","import React from 'react';\nimport './App.css';\n\nimport {\n  MyBookings\n} from './containers'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyBookings / >\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/\" exact={true} component={App} />\n        </Switch>\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}