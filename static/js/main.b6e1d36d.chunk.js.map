{"version":3,"sources":["actions/bookings/bookings.js","components/TravelCard/TravelCard.jsx","containers/MyBookings/MyBookings.jsx","App.js","serviceWorker.js","index.js"],"names":["getBookings","axios","get","then","response","data","moment","locale","useStyles","makeStyles","card","maxWidth","media","height","minHeight","color","TravelCard","cardData","classes","Card","className","CardActionArea","CardMedia","image","thumb","title","Typography","gutterBottom","variant","component","destination","outboundDate","format","calcScreenSize","window","screen","width","cardSpaces","padding","minWidth","container","display","flexDirection","justifyContent","alignItems","MyBookings","useState","myListBookings","setMyListBookings","bookings","useEffect","Container","map","item","key","App","Boolean","location","hostname","match","ReactDOM","render","path","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iYAIaA,EAAc,WACvB,OAAOC,IAAMC,IAAN,8DACFC,MAAK,SAAAC,GACF,OAAOA,EAASC,S,4DCE5BC,IAAOC,OAAO,MAEd,IAAMC,EAAYC,YAAW,CAC5BC,KAAM,CACLC,SAAU,KAEXC,MAAO,CACNC,OAAQ,OACRC,UAAW,IACXC,MAAO,UA2BMC,EAvBI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEfC,EAAUV,IAEhB,OACC,kBAACW,EAAA,EAAD,CAAMC,UAAWF,EAAQR,MACxB,kBAACW,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCF,UAAWF,EAAQN,MACnBW,MAAON,EAASO,MAChBC,MAAM,oBACN,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC9CZ,EAASa,aAEX,kBAACJ,EAAA,EAAD,CAAYE,QAAQ,QAAQb,MAAM,gBAAgBc,UAAU,KAC1DvB,IAAOW,EAASc,cAAcC,OAAO,eC9BtCC,EAAiB,WACtB,OAAOC,OAAOC,OAAOC,OAAS,KAAO,SAAW,OAG3C5B,EAAYC,YAAW,CAC5B4B,WAAY,CACXC,QAAS,WACTC,SAAU,SAEXC,UAAW,CACVF,QAAS,SACTG,QAAS,OACTC,cAAeT,IACfU,eAAgB,gBAChBC,WAAY,YAuCCC,EAnCI,WAElB,IAAM3B,EAAUV,IAFQ,EAIoBsC,mBAAS,IAJ7B,mBAIjBC,EAJiB,KAIDC,EAJC,KAOvBhD,EACGiD,EADHjD,YAGDkD,qBAAU,WACTjB,IACAjC,IAAcG,MAAK,SAAAC,GAClB4C,EAAkB5C,QAEjB,CAACJ,IAaJ,OACC,kBAACmD,EAAA,EAAD,CAAW/B,UAAWF,EAAQsB,WAVvBO,EAAeK,KAAI,SAACC,EAAMC,GAChC,OACC,yBAAKA,IAAKA,EAAKlC,UAAWF,EAAQmB,YACjC,kBAAC,EAAD,CAAYpB,SAAUoC,UChCZE,MARf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,Q,iBCEcoC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMlC,UAAW0B,MAE9BS,SAASC,eAAe,SDmHxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,MAAK,SAAAkE,GACjCA,EAAaC,kB","file":"static/js/main.b6e1d36d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n// const BASE_URL = process.env.REACT_APP_BASE_URL\r\n\r\nexport const getBookings = () => {\r\n    return axios.get(`https://5ba412108da2f20014654cf8.mockapi.io/api/v1/flights`)\r\n        .then(response => {\r\n            return response.data\r\n        }\r\n    )\r\n}","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActionArea from '@material-ui/core/CardActionArea'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport moment from 'moment'\r\nimport 'moment/locale/pt-br'\r\n\r\nmoment.locale('en')\r\n\r\nconst useStyles = makeStyles({\r\n\tcard: {\r\n\t\tmaxWidth: 345\r\n\t},\r\n\tmedia: {\r\n\t\theight: '100%',\r\n\t\tminHeight: 180,\r\n\t\tcolor: '#fff'\r\n\t}\r\n})\r\n\r\nconst TravelCard = ({ cardData }) => {\r\n\r\n\tconst classes = useStyles()\r\n\t\r\n\treturn (\r\n\t\t<Card className={classes.card}>\r\n\t\t\t<CardActionArea>\r\n\t\t\t\t<CardMedia\r\n\t\t\t\t\tclassName={classes.media}\r\n\t\t\t\t\timage={cardData.thumb}\r\n\t\t\t\t\ttitle=\"bookings of user\">\r\n\t\t\t\t\t<Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n\t\t\t\t\t\t{cardData.destination}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n\t\t\t\t\t\t{moment(cardData.outboundDate).format('DD MMM')}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</CardMedia>\r\n\t\t\t</CardActionArea>\r\n\t\t</Card>\r\n    )\r\n}\r\n\r\nexport default TravelCard","import React, { useState, useEffect } from 'react'\r\nimport Container from '@material-ui/core/Container'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { bookings } from '../../actions'\r\n\r\nimport { TravelCard } from '../../components'\r\n\r\nconst calcScreenSize = () => {\r\n\treturn window.screen.width <= 1024 ? 'column' : 'row'\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n\tcardSpaces: {\r\n\t\tpadding: '10px 0 0',\r\n\t\tminWidth: '300px'\r\n\t},\r\n\tcontainer: {\r\n\t\tpadding: '10px 0',\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: calcScreenSize(),\r\n\t\tjustifyContent: 'space-between',\r\n\t\talignItems: 'center'\r\n\t}\r\n})\r\n\r\nconst MyBookings = () => {\r\n\r\n\tconst classes = useStyles()\r\n\r\n\tconst [myListBookings, setMyListBookings] = useState([])\r\n\r\n\tconst {\r\n\t\tgetBookings\r\n\t} = bookings\r\n\r\n\tuseEffect(() => {\r\n\t\tcalcScreenSize()\r\n\t\tgetBookings().then(response => {\r\n\t\t\tsetMyListBookings(response)\r\n\t\t})\r\n\t}, [getBookings])\r\n\r\n\tconst renderListOfBookings = () => {\r\n\r\n\t\treturn myListBookings.map((item, key) => {\r\n\t\t\treturn (\r\n\t\t\t\t<div key={key} className={classes.cardSpaces}>\r\n\t\t\t\t\t<TravelCard cardData={item}/>\r\n\t\t\t\t</div>\t\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container className={classes.container}>\r\n\t\t\t{renderListOfBookings()}\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\nexport default MyBookings","import React from 'react';\nimport './App.css';\n\nimport {\n  MyBookings\n} from './containers'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyBookings / >\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/\" exact={true} component={App} />\n        </Switch>\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}